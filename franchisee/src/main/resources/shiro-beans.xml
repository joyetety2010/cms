<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	 
	 <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"/>
	 
	 <!--注入自己的permission  -->
	 <bean id="urlPermissionResolver" class="com.franchi.module.shiro.permission.UrlPermissionResovler"/>
	 
	 <!--MD5 密码认证规则 -->
	 <bean id="hashMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
	 	<property name="hashAlgorithmName" value="md5"/>
	 </bean>
	 
	 <!--注入自己的realm -->
	 <bean id="userRealm" class="com.franchi.module.shiro.realm.UserRealm">
	 	<!--开启缓存 -->
	 	<property name="cachingEnabled" value="true"/>
	 	<property name="authenticationCachingEnabled" value="true"/>
	 	<!--认证缓存路径 -->
	 	<property name="authenticationCacheName" value="shiro-authenticationCache"/>
	 	<!--开启缓存 -->
	 	<property name="authorizationCachingEnabled" value="true"/>
	 	<!--授权缓存路径 -->
	 	<property name="authorizationCacheName" value="shiro-authorizationCache"/>
	 	
	 	<!--注入密码规则-->
	 	<property name="credentialsMatcher" ref="hashMatcher"/>
	 	
	 </bean>


	<!--注入cookie模板-->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID -->
		<constructor-arg value="mldn-session-id" />
		<!-- 保证该系统不会受到跨域的脚本操作供给 -->
		<property name="httpOnly" value="true" />
		<!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
		<property name="maxAge" value="-1" />
	</bean>
	 
	<!--  <bean id="myListenner" class="com.franchi.module.listenner.MyListenner"/>  -->
	 <!-- 	
	 	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
	 		<property name="interval" value="10000"/>
	 		<property name="sessionManager" ref="sessionManager"/>
	 	</bean>
	  -->
	 <!--注入session管理器-->
	 <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置   单位毫秒  1小时超时 -->
         <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
        
        <!-- 注入监听器  -->
       <!--   <property name ="sessionListeners">  
	        <list>  
	           <ref bean="myListenner"/>
	        </list>  
     	</property>  -->
	 </bean>
	 
	 <!-- <bean id="sessionManager"  
        class="com.franchi.module.session.SimpleWebSessionManager">  
        <property name="globalSessionTimeout" value="15000" />  
        <property name="sessionValidationInterval" value="30000" />  
        <property name="sessionValidationSchedulerEnabled" value="true" />  
    </bean>   -->
	 
	 
	 <!--注入securityManager-->
	 <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	  <!--注入自己的realm-->
	    <property name="realm" ref="userRealm"/>
	     <!--注入缓存-->
	    <property name="cacheManager" ref="cacheManager"/>
	    <!--注入自己的解释器-->
	    <property name="authorizer.permissionResolver" ref="urlPermissionResolver"/>
	    
	    <!--注入session管理器-->
	    <property name="sessionManager" ref="sessionManager"></property>
	</bean>
	
	
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
    	 <property name="redirectUrl" value="/login" />
	</bean>
	

	
	<!--注入自己拦截器-->
	<bean id="resourceCheckFilter" class="com.franchi.module.shiro.filter.ResourceCheckFilter">
		<property name="errorUrl" value="unauth.jsp"/>
	</bean>	
	
	<bean id="shiroFilter" class="com.franchi.module.shiro.response.MyShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/login"/>
	    <!-- override these for application-specific URLs if you like:
	    <property name="loginUrl" value="/login.jsp"/>
	    <property name="successUrl" value="/home.jsp"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    
	    <!--设置拦截链-->
	    <property name="filterChainDefinitions">
	        <value>
	        	/admin/**=authc,resourceCheckFilter
				/login=anon
				/logout=logoutFilter
				/** = authc
	        </value>
	    </property>
	</bean>
	
	
	<!-- <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/login"/>
	    override these for application-specific URLs if you like:
	    <property name="loginUrl" value="/login.jsp"/>
	    <property name="successUrl" value="/home.jsp"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
	    The 'filters' property is not necessary since any declared javax.servlet.Filter bean 
	    defined will be automatically acquired and available via its beanName in chain       
	    definitions, but you can perform instance overrides or name aliases here if you like:
	    <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property>
	    
	    设置拦截链
	    <property name="filterChainDefinitions">
	        <value>
	        	/admin/**=authc,resourceCheckFilter
				/login=anon
				/logout=logoutFilter
				/** = authc
	        </value>
	    </property>
	</bean> -->
	
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>